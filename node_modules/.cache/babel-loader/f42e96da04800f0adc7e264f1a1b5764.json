{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.noop = noop;\nexports.returnTrue = returnTrue;\nexports.charIsNumber = charIsNumber;\nexports.escapeRegExp = escapeRegExp;\nexports.fixLeadingZero = fixLeadingZero;\nexports.splitString = splitString;\nexports.limitToScale = limitToScale;\nexports.roundToPrecision = roundToPrecision;\nexports.omit = omit;\nexports.setCaretPosition = setCaretPosition; // basic noop function\n\nfunction noop() {}\n\nfunction returnTrue() {\n  return true;\n}\n\nfunction charIsNumber(char) {\n  return !!(char || '').match(/\\d/);\n}\n\nfunction escapeRegExp(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\n\nfunction fixLeadingZero(numStr) {\n  if (!numStr) return numStr;\n  var isNegative = numStr[0] === '-';\n  if (isNegative) numStr = numStr.substring(1, numStr.length);\n  var parts = numStr.split('.');\n  var beforeDecimal = parts[0].replace(/^0+/, '') || '0';\n  var afterDecimal = parts[1] || '';\n  return '' + (isNegative ? '-' : '') + beforeDecimal + (afterDecimal ? '.' + afterDecimal : '');\n}\n\nfunction splitString(str, index) {\n  return [str.substring(0, index), str.substring(index)];\n}\n/**\r\n * limit decimal numbers to given scale\r\n * Not used .fixedTo because that will break with big numbers\r\n */\n\n\nfunction limitToScale(numStr, scale, fixedDecimalScale) {\n  var str = '';\n  var filler = fixedDecimalScale ? '0' : '';\n\n  for (var i = 0; i <= scale - 1; i++) {\n    str += numStr[i] || filler;\n  }\n\n  return str;\n}\n/**\r\n * This method is required to round prop value to given scale.\r\n * Not used .round or .fixedTo because that will break with big numbers\r\n */\n\n\nfunction roundToPrecision(numStr, scale, fixedDecimalScale) {\n  var numberParts = numStr.split('.');\n  var roundedDecimalParts = parseFloat('0.' + (numberParts[1] || '0')).toFixed(scale).split('.');\n  var intPart = numberParts[0].split('').reverse().reduce(function (roundedStr, current, idx) {\n    if (roundedStr.length > idx) {\n      return (Number(roundedStr[0]) + Number(current)).toString() + roundedStr.substring(1, roundedStr.length);\n    }\n\n    return current + roundedStr;\n  }, roundedDecimalParts[0]);\n  var decimalPart = limitToScale(roundedDecimalParts[1] || '', (numberParts[1] || '').length, fixedDecimalScale);\n  return intPart + (decimalPart ? '.' + decimalPart : '');\n}\n\nfunction omit(obj, keyMaps) {\n  var filteredObj = {};\n  Object.keys(obj).forEach(function (key) {\n    if (!keyMaps[key]) filteredObj[key] = obj[key];\n  });\n  return filteredObj;\n}\n/** set the caret positon in an input field **/\n\n\nfunction setCaretPosition(el, caretPos) {\n  el.value = el.value; // ^ this is used to not only get \"focus\", but\n  // to make sure we don't have it everything -selected-\n  // (it causes an issue in chrome, and having it doesn't hurt any other browser)\n\n  if (el !== null) {\n    if (el.createTextRange) {\n      var range = el.createTextRange();\n      range.move('character', caretPos);\n      range.select();\n      return true;\n    } // (el.selectionStart === 0 added for Firefox bug)\n\n\n    if (el.selectionStart || el.selectionStart === 0) {\n      el.focus();\n      el.setSelectionRange(caretPos, caretPos);\n      return true;\n    } // fail city, fortunately this never happens (as far as I've tested) :)\n\n\n    el.focus();\n    return false;\n  }\n}\n\nvar thousandGroupSpacing = exports.thousandGroupSpacing = {\n  two: '2',\n  twoScaled: '2s',\n  three: '3',\n  four: '4'\n};","map":{"version":3,"sources":["C:/Users/isaia/OneDrive/Documents/Amazon-clone/Amzon-clone/node_modules/react-currency-format/lib/utils.js"],"names":["Object","defineProperty","exports","value","noop","returnTrue","charIsNumber","escapeRegExp","fixLeadingZero","splitString","limitToScale","roundToPrecision","omit","setCaretPosition","char","match","str","replace","numStr","isNegative","substring","length","parts","split","beforeDecimal","afterDecimal","index","scale","fixedDecimalScale","filler","i","numberParts","roundedDecimalParts","parseFloat","toFixed","intPart","reverse","reduce","roundedStr","current","idx","Number","toString","decimalPart","obj","keyMaps","filteredObj","keys","forEach","key","el","caretPos","createTextRange","range","move","select","selectionStart","focus","setSelectionRange","thousandGroupSpacing","two","twoScaled","three","four"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.noop = noop;\nexports.returnTrue = returnTrue;\nexports.charIsNumber = charIsNumber;\nexports.escapeRegExp = escapeRegExp;\nexports.fixLeadingZero = fixLeadingZero;\nexports.splitString = splitString;\nexports.limitToScale = limitToScale;\nexports.roundToPrecision = roundToPrecision;\nexports.omit = omit;\nexports.setCaretPosition = setCaretPosition;\n\n\n// basic noop function\nfunction noop() {}\nfunction returnTrue() {\n  return true;\n}\n\nfunction charIsNumber(char) {\n  return !!(char || '').match(/\\d/);\n}\n\nfunction escapeRegExp(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\n\nfunction fixLeadingZero(numStr) {\n  if (!numStr) return numStr;\n  var isNegative = numStr[0] === '-';\n  if (isNegative) numStr = numStr.substring(1, numStr.length);\n  var parts = numStr.split('.');\n  var beforeDecimal = parts[0].replace(/^0+/, '') || '0';\n  var afterDecimal = parts[1] || '';\n\n  return '' + (isNegative ? '-' : '') + beforeDecimal + (afterDecimal ? '.' + afterDecimal : '');\n}\n\nfunction splitString(str, index) {\n  return [str.substring(0, index), str.substring(index)];\n}\n\n/**\r\n * limit decimal numbers to given scale\r\n * Not used .fixedTo because that will break with big numbers\r\n */\nfunction limitToScale(numStr, scale, fixedDecimalScale) {\n  var str = '';\n  var filler = fixedDecimalScale ? '0' : '';\n  for (var i = 0; i <= scale - 1; i++) {\n    str += numStr[i] || filler;\n  }\n  return str;\n}\n\n/**\r\n * This method is required to round prop value to given scale.\r\n * Not used .round or .fixedTo because that will break with big numbers\r\n */\nfunction roundToPrecision(numStr, scale, fixedDecimalScale) {\n  var numberParts = numStr.split('.');\n  var roundedDecimalParts = parseFloat('0.' + (numberParts[1] || '0')).toFixed(scale).split('.');\n  var intPart = numberParts[0].split('').reverse().reduce(function (roundedStr, current, idx) {\n    if (roundedStr.length > idx) {\n      return (Number(roundedStr[0]) + Number(current)).toString() + roundedStr.substring(1, roundedStr.length);\n    }\n    return current + roundedStr;\n  }, roundedDecimalParts[0]);\n\n  var decimalPart = limitToScale(roundedDecimalParts[1] || '', (numberParts[1] || '').length, fixedDecimalScale);\n\n  return intPart + (decimalPart ? '.' + decimalPart : '');\n}\n\nfunction omit(obj, keyMaps) {\n  var filteredObj = {};\n  Object.keys(obj).forEach(function (key) {\n    if (!keyMaps[key]) filteredObj[key] = obj[key];\n  });\n  return filteredObj;\n}\n\n/** set the caret positon in an input field **/\nfunction setCaretPosition(el, caretPos) {\n  el.value = el.value;\n  // ^ this is used to not only get \"focus\", but\n  // to make sure we don't have it everything -selected-\n  // (it causes an issue in chrome, and having it doesn't hurt any other browser)\n  if (el !== null) {\n    if (el.createTextRange) {\n      var range = el.createTextRange();\n      range.move('character', caretPos);\n      range.select();\n      return true;\n    }\n    // (el.selectionStart === 0 added for Firefox bug)\n    if (el.selectionStart || el.selectionStart === 0) {\n      el.focus();\n      el.setSelectionRange(caretPos, caretPos);\n      return true;\n    }\n\n    // fail city, fortunately this never happens (as far as I've tested) :)\n    el.focus();\n    return false;\n  }\n}\n\nvar thousandGroupSpacing = exports.thousandGroupSpacing = {\n  two: '2',\n  twoScaled: '2s',\n  three: '3',\n  four: '4'\n};"]},"metadata":{},"sourceType":"script"}